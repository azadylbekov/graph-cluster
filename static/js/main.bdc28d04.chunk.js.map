{"version":3,"sources":["index.js"],"names":["extraRenderers","CSS2DRenderer","fetch","then","res","json","data","ReactDOM","render","graphData","nodeAutoColorBy","nodeThreeObject","node","nodeEl","document","createElement","style","color","className","CSS2DObject","nodeThreeObjectExtend","getElementById"],"mappings":"qHAAA,kEASMA,EAAiB,CAAC,IAAIC,KAG5BC,MAAM,sBAAsBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAG,GACxDC,IAASC,OACR,cAAC,IAAD,CACCR,eAAgBA,EAChBS,UAAWH,EACXI,gBAAgB,QAChBC,gBAAiB,SAAAC,GAChB,IAAMC,EAASC,SAASC,cAAc,OAItC,OAFAF,EAAOG,MAAMC,MAAQL,EAAKK,MAC1BJ,EAAOK,UAAY,aACZ,IAAIC,IAAYN,IAExBO,uBAAuB,IAExBN,SAASO,eAAe,a","file":"static/js/main.bdc28d04.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ForceGraph3D } from 'react-force-graph';\nimport * as THREE from 'three';\nimport { CSS2DRenderer, CSS2DObject } from 'three/examples/jsm/renderers/CSS2DRenderer.js';\n// import data from './data'\n// import filteredData from './data2';\n\nconst extraRenderers = [new CSS2DRenderer()];\n\n\nfetch('filteredGraph.json').then(res => res.json()).then(data => {\n\tReactDOM.render(\n\t\t<ForceGraph3D\n\t\t\textraRenderers={extraRenderers}\n\t\t\tgraphData={data}\n\t\t\tnodeAutoColorBy=\"group\"\n\t\t\tnodeThreeObject={node => {\n\t\t\t\tconst nodeEl = document.createElement('div');\n\t\t\t\t// nodeEl.textContent = \"\";\n\t\t\t\tnodeEl.style.color = node.color;\n\t\t\t\tnodeEl.className = 'node-label';\n\t\t\t\treturn new CSS2DObject(nodeEl);\n\t\t\t}}\n\t\t\tnodeThreeObjectExtend={true}\n\t\t/>,\n\t\tdocument.getElementById('root')\n\t);\n});\n\n// let graphsOld = [];\n// let graphsArray = [];\n\n// fetch('graphs.json')\n// \t.then(res => res.json())\n// \t.then(data => {\n// \t\tgraphsOld = data;\n// \t\tlet i = 0;\n// \t\twhile (i < Object.keys(graphsOld).length) {\n// \t\t\tgraphsArray.push(graphsOld[String(i)])\n// \t\t\ti++;\n// \t\t}\n// \t\tconsole.log(graphsArray);\n// \t})\n\n// filtering data\n// let i = 0;\n// let k = 0;\n// while (i < data.length) {\n// \tk = 0;\n// \twhile (k < data.length) {\n// \t\tif (i != k) {\n// \t\t\tif (data[i] != undefined && data[k] != undefined) {\n// \t\t\t\tif (data[i].original_article_title.trim().split(\" \").join(\"\") == data[k].original_article_title.trim().split(\" \").join(\"\")\n// \t\t\t\t) {\n// \t\t\t\t\tdata.splice(i, 1);\n// \t\t\t\t\tconsole.log(true)\n// \t\t\t\t\ti = 0;\n// \t\t\t\t}\n// \t\t\t}\n// \t\t}\n// \t\tk++;\n// \t}\n// \ti++;\n// }\n// console.log(data);\n\n// let filteredGraph = {\n// \t\"nodes\": [],\n// \t\"links\": []\n// };\n// filteredData.map((item, index) => {\n// \titem.id = index;\n// \titem.group = item.original_article_url\n// \titem.name = item.original_article_title\n// \tfilteredGraph.nodes.push(item);\n// })\n\n// filteredGraph.nodes.map(nodes => {\n// \tfilteredGraph.nodes.map(nodesInside => {\n// \t\tif (nodes.id !== nodesInside.id) {\n// \t\t\tif (nodes.similar_article_url === nodesInside.original_article_url) {\n// \t\t\t\tfilteredGraph.links.push({ \"source\": nodes.id, \"target\": nodesInside.id })\n// \t\t\t}\n// \t\t}\n// \t})\n// })\n\n// console.log(JSON.stringify(filteredGraph));"],"sourceRoot":""}